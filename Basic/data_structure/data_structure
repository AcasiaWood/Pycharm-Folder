# operators

# int, str, float, bool (True, False)

# specific data structures

# list, tuple, dict

# operator preferences

# +, -, *, /, **, //, %

# conditional sentences

# if, elif, else

# repetitive statement

# for, while

# dictionary materials only contain key, value (tuple is available).

# use key and value to identify the value.

a = {}

# to define is declaring the function.

# class is a kind of framework that defines variables and methods to create a specific object.

# stack, queue (stack: putting recently is appearing, queue: putting recently is appearing recently).

# tree, graph (node, edge).

# tree is a kind of graph which does not have a rotation (BFS, DFS).

# graph is a kind of graph which has have a rotation.

# algorithm (grid: always the highest, but like optimal result).

# ex) grid algorithm project.

money = [500, 100, 50, 10]
change_money = []
request = input()
cash = 0
count = 0
string = ""
for i in range(0, len(money)):
    cash = money[i]
    if request % cash == 0:
        change_money.append(request//cash)
        break
    else:
        count = request//cash
        change_money.append(count)
        request = request-(cash*count)
print(change_money)

# thread is flow`s unit (processes variable is a thread variable).

# enlarge the cpu capacities to increase the threads speed.

import multiprocessing
import time
start_time = time.time()
def count(name):
    for i in range(1, 10001):
        print(name + ":" + str(i))
num_list = ['p1', 'p2', 'p3', 'p4']
pool = multiprocessing.Pool(processes=3)
pool.map(count, num_list)
pool.close()
pool.join()
print("end time", time.time() - start_time)
